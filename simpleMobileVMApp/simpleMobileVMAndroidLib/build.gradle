apply plugin: 'com.android.library'
apply plugin: 'pmd'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 29

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    dexOptions {
        javaMaxHeapSize "3g"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        htmlOutput file("$project.buildDir/reports/lint/lint-report.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-report.xml")
    }

    task vmAnalyze (dependsOn: ['lint', 'pmd']) doLast {
    }
}

task pmdBase(type: Pmd) {
    outputs.upToDateWhen { false }
    ruleSetFiles = files("${project.rootDir}/config/pmd/vm-pmd-ruleset.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/*Test.java'
    exclude '**/gen/**'
    exclude '**/generated/**'

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            setDestination(file("$project.buildDir/reports/pmd/pmd.xml"))
        }
        html {
            setDestination(file("$project.buildDir/reports/pmd/basic-pmd.html"))
        }
    }

    ignoreFailures = true
}

task pmd(dependsOn: "pmdBase") doLast {
    // Generate better html report using xslt
    ant.xslt(
            in: "$project.buildDir/reports/pmd/pmd.xml",
            style: "${project.rootDir}/config/pmd/wz-pmd-report.xslt",
            out:"$project.buildDir/reports/pmd/pmd.html")
}

dependencies {
    implementation 'com.android.support:support-annotations:28.0.0'

    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'junit:junit:4.12'
}